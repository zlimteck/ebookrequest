import express from 'express';
import { requireAuth } from '../middleware/auth.js';
import pushoverService from '../services/pushoverService.js';

const router = express.Router();

// RÃ©cupÃ©rer la configuration Pushover
router.get('/config', requireAuth, async (req, res) => {
  try {
    const config = await pushoverService.getConfig();
    res.json(config || { 
      enabled: false, 
      userKey: '', 
      apiToken: '',
      notifyOnNewRequest: true
    });
  } catch (error) {
    console.error('Erreur lors de la rÃ©cupÃ©ration de la configuration Pushover:', error);
    res.status(500).json({ message: 'Erreur lors de la rÃ©cupÃ©ration de la configuration Pushover' });
  }
});

// Mettre Ã  jour la configuration Pushover
router.put('/config', requireAuth, async (req, res) => {
  try {
    const { enabled, userKey, apiToken, notifyOnNewRequest } = req.body;
    
    if (typeof enabled !== 'boolean' || 
        (enabled && (!userKey || !apiToken))) {
      return res.status(400).json({ 
        message: 'Une clÃ© utilisateur et un jeton API sont requis pour activer les notifications Pushover' 
      });
    }

    const config = await pushoverService.updateConfig({
      enabled,
      userKey: userKey || '',
      apiToken: apiToken || '',
      notifyOnNewRequest: notifyOnNewRequest !== false, // true par dÃ©faut
      configuredBy: req.user.id
    });

    res.json(config);
  } catch (error) {
    console.error('Erreur lors de la mise Ã  jour de la configuration Pushover:', error);
    res.status(500).json({ message: 'Erreur lors de la mise Ã  jour de la configuration Pushover' });
  }
});

// Tester la configuration Pushover
router.post('/test', requireAuth, async (req, res) => {
  try {
    const config = await pushoverService.getConfig();
    
    if (!config || !config.enabled || !config.userKey || !config.apiToken) {
      return res.status(400).json({ 
        message: 'Veuillez configurer Pushover avant de tester' 
      });
    }

    const testMessage = `ðŸ”” Test de notification Pushover
    
âœ… Votre configuration Pushover est correctement paramÃ©trÃ©e !

Vous recevrez dÃ©sormais des notifications pour :
â€¢ Nouvelles demandes d'ebook
â€¢ Demandes traitÃ©es
â€¢ ActivitÃ©s importantes`;

    const result = await pushoverService.sendNotification(
      'ðŸ”” Test Pushover RÃ©ussi',
      testMessage,
      {
        priority: 1,
        sound: 'magic',
        url: process.env.FRONTEND_URL,
        url_title: 'Aller sur EbookRequest',
        html: 1
      }
    );

    if (result.success) {
      res.json({ message: 'Notification de test envoyÃ©e avec succÃ¨s !' });
    } else {
      res.status(500).json({ 
        message: 'Ã‰chec de l\'envoi de la notification de test',
        error: result.error 
      });
    }
  } catch (error) {
    console.error('Erreur lors de l\'envoi de la notification de test:', error);
    res.status(500).json({ 
      message: 'Erreur lors de l\'envoi de la notification de test',
      error: error.message 
    });
  }
});

export default router;